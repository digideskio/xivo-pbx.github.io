<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>XiVO Blog</title><link href="http://blog.xivo.io/" rel="alternate"></link><link href="http://blog.xivo.io/feeds/articles.atom.xml" rel="self"></link><id>http://blog.xivo.io/</id><updated>2016-06-06T15:00:00-04:00</updated><entry><title>How we test multiple XiVO with Terraform</title><link href="http://blog.xivo.io/how-we-test-multiple-xivo-with-terraform.html" rel="alternate"></link><published>2016-06-06T15:00:00-04:00</published><author><name>sduthil</name></author><id>tag:blog.xivo.io,2016-06-06:how-we-test-multiple-xivo-with-terraform.html</id><summary type="html">&lt;p&gt;We are very fond of tests when developing XiVO, especially automated ones :)
Currently, we have three levels of tests: unit-tests (very small), integration
tests (medium size) and acceptance tests (large tests, which take a few hours to
run). Acceptance tests also include manual tests, which we love hating of doing:
manual testing takes us about half a day of 4 people, before each release. Of
course we hate running manual tests when a machine could do it for us, so we're
always wanting to automate them out.&lt;/p&gt;
&lt;p&gt;On our journey towards the eradication of manual tests, we've encountered a
quite friendly software called Terraform. It allows us to automatically deploy
and configure XiVO instances, which is very helpful when testing in an
almost-real environment. We'll introduce it and show you how we can deploy two
XiVO with High Availability (HA) enabled, in about 250 lines of scripts and
configuration.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://terraform.io"&gt;Terraform&lt;/a&gt; is written in Go by HashiCorp and allows you
to deploy virtual machines, containers, databases and a lot of other instances
on a variety of providers.&lt;/p&gt;
&lt;p&gt;We use &lt;a href="https://openstack.org"&gt;OpenStack&lt;/a&gt; to host virtual machines, and it
happens Terraform can talk to OpenStack to automatically create new virtual
machines.&lt;/p&gt;
&lt;p&gt;Who is going to glue this all together? Our trusted friend
&lt;a href="https://jenkins.io"&gt;Jenkins&lt;/a&gt; (which you can meet on
&lt;a href="http://jenkins.xivo.io"&gt;http://jenkins.xivo.io&lt;/a&gt;) is the perfect candidate.
Here's the summary of &lt;a href="http://jenkins.xivo.io/job/daily-acceptance-ha"&gt;his job&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The steps of the Jenkins job: clone, terraform, configure, test" src="/public/jenkins-terraform.svg" /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Jenkins will fetch the latest code from our
   &lt;a href="https://github.com/xivo-pbx"&gt;Github repositories&lt;/a&gt; (and &lt;a href="https://github.com/sboily/xivo-terraform"&gt;xivo-terraform&lt;/a&gt;, because tests or the deploying scripts might change&lt;/li&gt;
&lt;li&gt;Jenkins gets ready to test and swears at us for doing such a boring job&lt;/li&gt;
&lt;li&gt;Jenkins creates the configuration files for Terraform and runs &lt;code&gt;terraform apply&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Terraform tells OpenStack to create 2 Debian virtual machines, then installs XiVO on them, which takes about 15 minutes.&lt;/li&gt;
&lt;li&gt;Jenkins finalizes the configuration of the XiVO by enabling the HA between the two machines.&lt;/li&gt;
&lt;li&gt;Jenkins may now run the automatic tests for the HA, such as verifying data
replication, shutting down the master, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll get a bit more in details of the Terraform configuration files. Here goes the main one, &lt;code&gt;xivo.tf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;provider &amp;quot;openstack&amp;quot; {
    user_name = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_name&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
    password = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
    tenant_name = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tenant_name&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
    domain_name = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;domain_name&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
    auth_url  = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auth_url&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
}

resource &amp;quot;openstack_compute_instance_v2&amp;quot; &amp;quot;xivo&amp;quot; {
    name = &amp;quot;xivo-test-ha&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
    region = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
    image_id = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image_id&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
    flavor_id = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flavor_id&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
    key_pair = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key_pair&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;

    count = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;

    security_groups = [
        &amp;quot;default&amp;quot;
    ]

    user_data = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;\&lt;span class="s2"&gt;&amp;quot;files/cloud-init.txt&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;

    network {
        name = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
    }

    connection {
        user = &amp;quot;root&amp;quot;
        key_file = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key_file&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
    }

    provisioner &amp;quot;local-exec&amp;quot; {
        command =  &amp;quot;echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;:&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="n"&gt;fixed_ip_v4&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt;&amp;gt; private_ips.txt ; sleep 2&amp;quot;
    }

    provisioner &amp;quot;file&amp;quot; {
        source = &amp;quot;private_ips.txt&amp;quot;
        destination = &amp;quot;/tmp/private_ips.txt&amp;quot;
    }

    provisioner &amp;quot;remote-exec&amp;quot; {
        inline = [
            &amp;quot;wget --no-check-certificate https://raw.githubusercontent.com/sboily/xivo-terraform/master/bin/xivo_install_aws -O /tmp/xivo_install_aws&amp;quot;,
            &amp;quot;bash /tmp/xivo_install_aws&amp;quot;
        ]
    }

}

output &amp;quot;ips&amp;quot; {
   value = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;\&lt;span class="s2"&gt;&amp;quot; &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;,openstack_compute_instance_v2.xivo.*.access_ip_v4)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Variables &lt;code&gt;${var.something}&lt;/code&gt; are defined in a separate file, &lt;code&gt;vars.tf&lt;/code&gt;, looking like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;variable &amp;quot;count&amp;quot; {
  default = 2
}

variable &amp;quot;user_name&amp;quot; {
    description = &amp;quot;Openstack username.&amp;quot;
}

...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What, no values? No, that's only the definition of the variables. The values are set in a third file &lt;code&gt;terraform.tfvars&lt;/code&gt;, looking like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user_name = &amp;quot;jenkins&amp;quot;
password = &amp;quot;secret&amp;quot;
tenant_name = &amp;quot;jenkins&amp;quot;
auth_url = &amp;quot;http://openstack:5000/v3&amp;quot;
key_pair = &amp;quot;jenkins&amp;quot;
key_file = &amp;quot;/home/me/.ssh/id_rsa&amp;quot;
network = &amp;quot;provider&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are three interesting bits in &lt;code&gt;xivo.tf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;command =  &amp;quot;echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;:&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="n"&gt;fixed_ip_v4&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt;&amp;gt; private_ips.txt ; sleep 2&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create a file containing the IP address of the two machines Terraform created on OpenStack, looking like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We decided &lt;code&gt;0&lt;/code&gt; would be the master and &lt;code&gt;1&lt;/code&gt; would be the slave. All the code we
use to connect to the newly created machines rely on these two lines to know
where the machines are, because the IP addresses are not fixed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user_data = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;\&lt;span class="s2"&gt;&amp;quot;files/cloud-init.txt&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the machine starts, a little software called &lt;a href="https://cloudinit.readthedocs.io/"&gt;Cloud-Init&lt;/a&gt; will make a HTTP request to get its configuration and do some changes on the machine, such as setting the hostname, allowing SSH connections, etc. The above line tells Openstack which configuration to expose to Cloud-Init.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;provisioner &amp;quot;remote-exec&amp;quot; {
    inline = [
        &amp;quot;wget --no-check-certificate https://raw.githubusercontent.com/sboily/xivo-terraform/master/bin/xivo_install_aws -O /tmp/xivo_install_aws&amp;quot;,
        &amp;quot;bash /tmp/xivo_install_aws&amp;quot;
    ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This script will be run after the machine is started, that will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;install XiVO&lt;/li&gt;
&lt;li&gt;configure the wizard&lt;/li&gt;
&lt;li&gt;configure the HA&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don't hesitate to &lt;a href="https://github.com/sboily/xivo-terraform/tree/master/bin/xivo_install_aws"&gt;take a look&lt;/a&gt;, it's very straightforward.&lt;/p&gt;</summary></entry><entry><title>We are 6 and yes we have more than 150 phones :)</title><link href="http://blog.xivo.io/we-are-6-and-yes-we-have-more-than-150-phones.html" rel="alternate"></link><published>2015-09-09T16:57:00-04:00</published><author><name>quintana</name></author><id>tag:blog.xivo.io,2015-09-09:we-are-6-and-yes-we-have-more-than-150-phones.html</id><summary type="html">&lt;p&gt;Hey XiVO community,&lt;/p&gt;
&lt;p&gt;Yes we work on telecomunications/telecoms, we would like to share with
you some photos from our office at Quebec city ! Thanks to Etienne to
have counted the phones.&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_20150909_124822.jpg" src="/public/office/IMG_20150909_124822.jpg" title="IMG_20150909_124822.jpg, sept. 2015" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_20150909_124838.jpg" src="/public/office/IMG_20150909_124838.jpg" title="IMG_20150909_124838.jpg, sept. 2015" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_20150909_124855.jpg" src="/public/office/IMG_20150909_124855.jpg" title="IMG_20150909_124855.jpg, sept. 2015" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_20150909_124914.jpg" src="/public/office/IMG_20150909_124914.jpg" title="IMG_20150909_124914.jpg, sept. 2015" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_20150909_124919.jpg" src="/public/office/IMG_20150909_124919.jpg" title="IMG_20150909_124919.jpg, sept. 2015" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_20150909_124927.jpg" src="/public/office/IMG_20150909_124927.jpg" title="IMG_20150909_124927.jpg, sept. 2015" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_20150909_124936.jpg" src="/public/office/IMG_20150909_124936.jpg" title="IMG_20150909_124936.jpg, sept. 2015" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_20150909_124943.jpg" src="/public/office/IMG_20150909_124943.jpg" title="IMG_20150909_124943.jpg, sept. 2015" /&gt;&lt;/p&gt;
&lt;/p&gt;</summary></entry><entry><title>Sprint Review 15.07</title><link href="http://blog.xivo.io/sprint-review-1507.html" rel="alternate"></link><published>2015-04-10T13:52:00-04:00</published><author><name>jpgelinas</name></author><id>tag:blog.xivo.io,2015-04-10:sprint-review-1507.html</id><summary type="html">&lt;p&gt;Here are a few links explaining what we are going to ship in XiVO 15.07:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://projects.xivo.io/versions/224" title="https://projects.xivo.io/versions/224"&gt;Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XiVO 15.07 brings new visual and functional features and fixes a few
bugs among which:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The xlet services and fax has been redesigned&lt;/li&gt;
&lt;li&gt;The xlet people shows the mobile phone number&lt;/li&gt;
&lt;li&gt;Agent status in xlet people is always displayed&lt;/li&gt;
&lt;li&gt;(bug) background input in fax xlet on mac has been adjusted&lt;/li&gt;
&lt;li&gt;(bug) removed an error displayed in XiVO Client
    (QPixmap::scaleHeight: Pixmap is a null pixmap)&lt;/li&gt;
&lt;li&gt;(bug) new fonts were not displayed if not installed locally on
    client's system&lt;/li&gt;
&lt;li&gt;Old XiVO styles were removed&lt;/li&gt;
&lt;li&gt;Xlet conference code was refactored (in preparation of
    upcoming redesign)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This version also fixes 9 other bugs :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 bugs related to associating and de-associating lines (or
    multiple lines) to a device&lt;/li&gt;
&lt;li&gt;2 bugs related to provisioning, setting admin/user password on
    Polycom phones and resetting a device to autoprov when already in
    autoprov&lt;/li&gt;
&lt;li&gt;2 bugs related to xivo-upgrade, queue periodic-announce is not lost
    anymore when upgrading and an upgrade error when upgrading from
    13.25&lt;/li&gt;
&lt;li&gt;it is now possible to dial a conference room begining with 0 from
    the xivo client&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also included a new Asterisk version 11.17.0 and added a new tutorial
to the contributions section.&lt;/p&gt;
&lt;p&gt;Enjoy! ;)&lt;/p&gt;
&lt;/p&gt;</summary></entry><entry><title>Sprint Review 15.06</title><link href="http://blog.xivo.io/sprint-review-1506.html" rel="alternate"></link><published>2015-03-27T14:19:00-04:00</published><author><name>jpgelinas</name></author><id>tag:blog.xivo.io,2015-03-27:sprint-review-1506.html</id><summary type="html">&lt;p&gt;Here are a few links explaining what we are going to ship in XiVO 15.06:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://projects.xivo.io/versions/222" title="https://projects.xivo.io/versions/222"&gt;Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XiVO 15.06 brings changes into the XiVO Client, visual and functional
changes among which:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the identity xlet's transformation continued&lt;/li&gt;
&lt;li&gt;the fax xlet has been revamped&lt;/li&gt;
&lt;li&gt;the tabber has been revamped&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This version also fixes 8 bugs.&lt;/p&gt;
&lt;p&gt;Technical matters :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xivo-provd was splitted into multiple git repositories :
    xivo-provisioning, xivo-provd-client and xivo-provd-cli. The later
    replaces the deprecated xivo-provd-pycli, the command line
    interpreter for provd.&lt;/li&gt;
&lt;li&gt;xivo-agent was renamed to xivo-agentd to be coherent with the
    general naming convention.&lt;/li&gt;
&lt;li&gt;xivo-agent-ctl was renamed to xivo-agentd-cli to be coherent with
    the general naming convention.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can consult &lt;a href="http://documentation.xivo.io/en/latest/upgrade/upgrade.html#id1" title="Upgrade Notes"&gt;upgrade
notes&lt;/a&gt;
for this version.&lt;/p&gt;
&lt;/p&gt;</summary></entry><entry><title>Sprint Review 15.05</title><link href="http://blog.xivo.io/sprint-review-1505.html" rel="alternate"></link><published>2015-03-13T13:55:00-04:00</published><author><name>jpgelinas</name></author><id>tag:blog.xivo.io,2015-03-13:sprint-review-1505.html</id><summary type="html">&lt;p&gt;Here are a few links explaining what we are going to ship in XiVO 15.05:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://projects.xivo.io/versions/221" title="https://projects.xivo.io/versions/221"&gt;Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XiVO 15.05 brings changes into the XiVO Client: visual and functional
changes. Here are some screenshots of the login screen, Xlet people (the
future of all contact lists and searches in the application) and a view
of a "folded" client :&lt;/p&gt;
&lt;p&gt;&lt;img alt="demo-login.png" src="/public/xivo-client/demo-login.png" title="demo-login.png, mar. 2015" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="demo-people.png" src="/public/xivo-client/demo-people.png" title="demo-people.png, mar. 2015" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="demo-folded.png" src="/public/xivo-client/demo-folded.png" title="demo-folded.png, mar. 2015" /&gt;&lt;/p&gt;
&lt;p&gt;We also added an HTTP REST API interface to xivo-agentd which means you
can now control agent status (login/logout/pause/unpause) from within
your own application.&lt;/p&gt;
&lt;/p&gt;</summary></entry><entry><title>How we test xivo-dird</title><link href="http://blog.xivo.io/how-we-test-xivo-dird.html" rel="alternate"></link><published>2014-12-03T21:23:00-05:00</published><author><name>pcadotte</name></author><id>tag:blog.xivo.io,2014-12-03:how-we-test-xivo-dird.html</id><summary type="html">&lt;p&gt;XiVO dird is a new directory service in XiVO. It will be used as the
entry pointfor lookups and reverse lookups in the near future. Dird is
the first service inXiVO that is developed with the objective of being
runnable on a separate machine.This objective made it essential to make
the service configurable so that dirdis not tied to an existing XiVO
installation.&lt;/p&gt;
&lt;p&gt;Making the borders clear around xivo-dird made it possible to test
against dird'sinterface more easily than what used to be possible with
other services in XiVO.&lt;/p&gt;
&lt;p&gt;Like any other service in XiVO, xivo-dird has a unit test suite that we
strive tomake as complete as possible. We also wrote a suite of
integration tests that canbe executed from a development machine without
a full installation of XiVO. Theintegration test suite uses xivo-dird as
a black box, changing the input only, typicallyconfiguration files,
files, web services or other resources depending on the testedback-end.
These tests are higher level than unit tests but not as high as the
oneswe usually have in xivo-acceptance that requires and sometimes test
manycomponents at the same time.&lt;/p&gt;
&lt;p&gt;Some of the tools we use for the integration tests include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker to launch and stop xivo-dird quickly with different
    configuration&lt;/li&gt;
&lt;li&gt;fig to coordinate our launched services, it starts all containers
    with the proper arguments to allow the whole system to work&lt;/li&gt;
&lt;li&gt;nosetests to run the test suite&lt;/li&gt;
&lt;li&gt;jenkins to execute the tests and report problems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The way these tests are structured, is quite simple at the moment. At
the rootof the xivo-dird project, an integration_tests directory can be
found. In thisdirectory, there is a Makefile, a Dockerfile, an assets
folder and a suitefolder. Here's a quick description of each of these
elements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the file to build the test image that is used by the test suite.
It generatesa runnable docker container using the current branch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Makefile&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Makefile is a helper to build the test image and pull somedocker
dependencies. make test-image can be used to generate a freshtest image
ready for testing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This directory contains many set of runnable configuration that areused
by the test suite. An asset consists of a fig.yml file to describethe
environment in which we want to run dird as well as allconfiguration
files that are required for this given test.&lt;/p&gt;
&lt;p&gt;Here is an example of an asset directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% tree assets/xivo_users_multiple_xivo &lt;/span&gt;
&lt;span class="n"&gt;assets&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xivo_users_multiple_xivo&lt;/span&gt;
├── &lt;span class="n"&gt;confd_data&lt;/span&gt;
│   ├── &lt;span class="n"&gt;america&lt;/span&gt;
│   │   └── &lt;span class="mf"&gt;1.1&lt;/span&gt;
│   │       ├── &lt;span class="n"&gt;infos&lt;/span&gt;
│   │       └── &lt;span class="n"&gt;users&lt;/span&gt;
│   ├── &lt;span class="n"&gt;asia&lt;/span&gt;
│   │   └── &lt;span class="mf"&gt;1.1&lt;/span&gt;
│   │       ├── &lt;span class="n"&gt;infos&lt;/span&gt;
│   │       └── &lt;span class="n"&gt;users&lt;/span&gt;
│   ├── &lt;span class="n"&gt;europe&lt;/span&gt;
│   │   └── &lt;span class="mf"&gt;1.1&lt;/span&gt;
│   │       ├── &lt;span class="n"&gt;infos&lt;/span&gt;
│   │       └── &lt;span class="n"&gt;users&lt;/span&gt;
│   └── &lt;span class="n"&gt;run_confd&lt;/span&gt;
├── &lt;span class="n"&gt;etc&lt;/span&gt;
│   └── &lt;span class="n"&gt;xivo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dird&lt;/span&gt;
│       ├── &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;
│       └── &lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;
│           ├── &lt;span class="n"&gt;america&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;
│           ├── &lt;span class="n"&gt;asia&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;
│           └── &lt;span class="n"&gt;europe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;
└── &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;

&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;directories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;suite&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All integration test are in this directory, each TestCase class hasan
asset field that map the test to an asset. The BaseDirdIntegrationTestis
responsible of launching and stopping the environment for each testcase.&lt;/p&gt;
&lt;p&gt;Here is an example fig file for the asset shown above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% cat assets/xivo_users_multiple_xivo/fig.yml&lt;/span&gt;
&lt;span class="n"&gt;dird&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dird&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;
  &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &amp;quot;&lt;span class="mi"&gt;9489&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9489&lt;/span&gt;&amp;quot;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &amp;quot;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xivo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dird&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xivo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dird&lt;/span&gt;&amp;quot;
  &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &amp;quot;&lt;span class="n"&gt;america&lt;/span&gt;&amp;quot;
    &lt;span class="o"&gt;-&lt;/span&gt; &amp;quot;&lt;span class="n"&gt;asia&lt;/span&gt;&amp;quot;
    &lt;span class="o"&gt;-&lt;/span&gt; &amp;quot;&lt;span class="n"&gt;europe&lt;/span&gt;&amp;quot;
&lt;span class="n"&gt;america&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;2.7&lt;/span&gt;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &amp;quot;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;confd_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&amp;quot;
  &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &amp;quot;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run_confd&lt;/span&gt; &lt;span class="n"&gt;america&lt;/span&gt;&amp;quot;
&lt;span class="n"&gt;europe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;2.7&lt;/span&gt;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &amp;quot;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;confd_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&amp;quot;
  &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &amp;quot;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run_confd&lt;/span&gt; &lt;span class="n"&gt;europe&lt;/span&gt;&amp;quot;
&lt;span class="n"&gt;asia&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;2.7&lt;/span&gt;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &amp;quot;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;confd_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&amp;quot;
  &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &amp;quot;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run_confd&lt;/span&gt; &lt;span class="n"&gt;asia&lt;/span&gt;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The resulting architecture used for the test would look like the
following diagram.&lt;/p&gt;
&lt;p&gt;&lt;img alt="architecture.png" src="/public/architecture/architecture.png" title="architecture.png, déc. 2014" /&gt;&lt;/p&gt;
&lt;p&gt;Since xivo-confd is not docker ready at the moment, we mocked the confd
serverwith a python SimpleHTTPServer and some static files. This allowed
us to havepredictable results for our tests without having to launch and
configure awhole XiVO server and still be able to test some common
cases, such as servernot started, 404 errors, etc.&lt;/p&gt;
&lt;p&gt;Once we know that all of our back-end and that the core of dird is
completelytested, only one acceptance test is required to test the whole
chain ofinteraction.&lt;/p&gt;
&lt;p&gt;This mode of testing is still new to our team, we will see if the
theoreticaladvantages that we get from this kind of segmentation is as
good in practice asit is on paper.&lt;/p&gt;
&lt;p&gt;Detailed instructions are available in xivo-dird's README for those who
want totry running the test suite.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://xivo.io" title="XiVO"&gt;XiVO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://documentation.xivo.io" title="XiVO documentation"&gt;XiVO
    documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://documentation.xivo.io/dev/system/xivo-dird/xivo-dird.html" title="dird documentation"&gt;xivo-dird
    documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/xivo-pbx/xivo-dird" title="dird source code"&gt;xivo-dird source
    code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.fig.sh" title="fig"&gt;fig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docker.com" title="docker"&gt;docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;</summary></entry><entry><title>Hacking at the Hackfest</title><link href="http://blog.xivo.io/hacking-at-the-hackfest.html" rel="alternate"></link><published>2012-11-08T13:45:00-05:00</published><author><name>gsanderson</name></author><id>tag:blog.xivo.io,2012-11-08:hacking-at-the-hackfest.html</id><summary type="html">&lt;p&gt;Hello once again XiVO followers ! What's this ? My first blog post has
barely been published and i've already written a second one ! But this
time, i'll be writing about something that will be more interesting for
1337 h@X0r\$ and the like: the Hackfest !&lt;/p&gt;
&lt;h3&gt;Hackfest ? What's a Hackfest ?&lt;/h3&gt;
&lt;p&gt;The &lt;a href="http://www.hackfest.ca" title="Hackfest"&gt;Hackfest&lt;/a&gt; is one of the biggest
events about computer security in the province of Quebec. This year,
more than 400 participants were treated to 2 days full of conferences
and hacking games like Lockpicking, Cyber warfare and Capture The Flag.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hackfest
cyberwar" src="/public/HackFest2012/.hackfest_cyberwar_m.jpg" title="Hackfest cyberwar, Nov 2012" /&gt;&lt;/p&gt;
&lt;p&gt;XiVO also participated in the Hackfest by giving a conference and
organising the XiVO pwn2own hacking game.&lt;/p&gt;
&lt;h3&gt;What kind of conference ?&lt;/h3&gt;
&lt;p&gt;We gave a conference about the security and future of free
telecommunications, the slides are available in attachment of this post.
The conference was supposed to be given by our colleague &lt;a href="http://twitter.com/nicboul" title="Nicolas Bouliane's twitter feed"&gt;Nicolas
Bouliane&lt;/a&gt;,
but unfortunately, he got sick a few days before the event. Me and my
SCRUM master gave the talk instead. Here's a picture of us during the
conference. As you can see, the room was pretty full !&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hackfest2k9/8147555929/" title="Hackfest 2012: avencall #hf2012 by hackfest.ca, on Flickr"&gt;&lt;img alt="Hackfest 2012: avencall
#hf2012" src="http://farm9.staticflickr.com/8328/8147555929_6aa0caf977.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;What about the pwn2own ?&lt;/h3&gt;
&lt;p&gt;Hackers were given 48 hours to try and hack a standard XiVO server and
find the most exploits possible. As the game went on, clues were given
out through our twitter feed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="XiVO twitter
feed" src="/public/HackFest2012/.xivo_twitter_feed_m.jpg" title="XiVO twitter feed, Nov 2012" /&gt;&lt;/p&gt;
&lt;p&gt;Once a hacker found an exploit, he could submit it to our scoreboard to
win points. At the end of the game, the top 3 teams with the most points
won cash prizes. Here's a screenshot of the scoreboard at the end of the
game.&lt;/p&gt;
&lt;p&gt;&lt;img alt="XiVO
Scoreboard" src="/public/HackFest2012/.xivo_score_board_m.jpg" title="XiVO Scoreboard, Nov 2012" /&gt;&lt;/p&gt;
&lt;h3&gt;So what happened ? Did you get hacked ?!&lt;/h3&gt;
&lt;p&gt;Yes ! As you can see from the scoreboard, 3 teams were able to find
quite a few exploits in XiVO. What surprised us most was the number of
hacks that were found on the web interface. Since XiVO is first and
foremost a telephony system, we thought that the hackers would
concentrate on hacking the telephone services (For example, control SIP
accounts, create fake telephones through the Provisionning service, DDoS
the Asterisk server) After all, the web interface is only used for
administrative purposes and isn't a critical piece of the XiVO server.
Instead, we got a total of 10 web exploits and only 1 telephone exploit.&lt;/p&gt;
&lt;h3&gt;What happens now ?&lt;/h3&gt;
&lt;p&gt;The XiVO dev team is working on fixing all the exploits found during the
pwn2own. The fixes will be released in version 12.22 at the end of next
week.&lt;/p&gt;
&lt;p&gt;All in all, we had great fun participating in the Hackfest. We're
already thinking about how we can make the game more exciting next year,
like how to encourage people to go explore more of XiVO's telephony
services.&lt;/p&gt;
&lt;p&gt;Thanks again to the 3 teams who participated in XIVO's pwn2own
(RingZer0, Abed&amp;amp;Francis and Bitducks). We look forward to more hacking
next year !&lt;/p&gt;
&lt;/p&gt;</summary></entry><entry><title>A conference with Uncle Bob</title><link href="http://blog.xivo.io/a-conference-with-uncle-bob.html" rel="alternate"></link><published>2012-11-05T13:35:00-05:00</published><author><name>gsanderson</name></author><id>tag:blog.xivo.io,2012-11-05:a-conference-with-uncle-bob.html</id><summary type="html">&lt;p&gt;Hello to everyone following the XiVO blog ! My name is Gregory Eric
Sanderson Turcot Temlett MacDonnell Forbes. I've been working on the
XiVO software team for 2 months now and the time has come to publish my
first official blog post. Enjoy ;)&lt;/p&gt;
&lt;p&gt;At the end of last september, the XiVO team had the amazing chance of
attending a talk given by none other than Robert C. Martin himself ! Mr.
Martin, also known as "Uncle Bob", is a highly experienced software
developer with over 30 years of experience. The subject of his talk was
seemingly simple: What should we expect from a professional software
developer ? More that you would think. Uncle bob divided his talk into
about a dozen different expectations. Here is my personal interpretation
for each expectation he gave.&lt;/p&gt;
&lt;h2&gt;You will not ship shit&lt;/h2&gt;
&lt;p&gt;Pretty provocative for a first expectation, eh ?&lt;/p&gt;
&lt;p&gt;Why is this even on the list ? If programmers are professionals, then
they should already be shipping quality code, right ? The reality is
that programmers have to deal with issues that can easily lower the
quality of their software:Tight deadlines, small budget, crappy code,
infuriating clients, overly complex architectures, etc. Bad habits are
hard to break, so when you start shipping shit, it becomes easier to do
so again and again.&lt;/p&gt;
&lt;p&gt;But here's a thought: Software is being found increasingly more often in
critical systems, like pacemakers for example. What happens if a
programmer ships faulty software directly into a person's heart ? When
the software that wedevelop can tip the balance between life and death,
then as professionals, we should never need to "ship shit". At the very
least, we should always aim to never do so.&lt;/p&gt;
&lt;h2&gt;You will ship all the time&lt;/h2&gt;
&lt;p&gt;Stories about unkempt deadlines or missed release dates are all over the
internet. Worse yet, sometimes software is delivered on time, but
upgrades become catastrophic.&lt;/p&gt;
&lt;p&gt;Let's face it, there will always be situations where a client who would
like additional feature X to be ready within 2 weeks, but in the end it
takes 2 months to develop. So what can you do to make the situation
better ? Well, by making sure you're always being ready to ship at a
moment's notice. Shipping all the time might seem impossible the first
time you consider it, but it forces you to develop certain habits that
make your software more stable. Namely,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Easier deployments&lt;/strong&gt;. Your deployment strategy needs to be simple,
    fast, and automated. Once that's in place, you no longer need to
    plan your upgrades since you can re-use your automated procedure&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client satisfaction&lt;/strong&gt;. The client no longer needs to wait to get
    the latest version of your software&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Less time wasted&lt;/strong&gt;. Less time spent on shipping and upgrades means
    more time to work on more important stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How do you ship all the time ? One way is through Continuous
Integration, but it isn't the only approach. What's important is to find
a way that works well with your software and your team.&lt;/p&gt;
&lt;h2&gt;Inexpensive Adaptability&lt;/h2&gt;
&lt;p&gt;The concept of evolution is key here. Code that doesn't evolve is prone
to stagnation and becomes harder to adapt, leading to technical debt.
How do you make sure your code doesn't stagnate ? As Uncle Bob would
say: "you need to flex your code" You can test the adaptability of your
software by looking at how complex it would be to suddenly change a
major component of the system. For example: try changing the database,
use another protocol, redesign the UI. The less changes that are needed,
the more adaptive your code becomes. One example of potential
adaptability that you might consider is the SQL vs NoSQL debate. If you
suddenly needed to change from one to the other, how much effort and how
much code would you need to change ? The less there is, the better.&lt;/p&gt;
&lt;h2&gt;Extreme Quality&lt;/h2&gt;
&lt;p&gt;As professionals, we should always aim to produce the best work that we
can. Here's my personal list of what I consider to be quality work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clean code&lt;/li&gt;
&lt;li&gt;Code that is easy to modify&lt;/li&gt;
&lt;li&gt;Clear and concise documentation&lt;/li&gt;
&lt;li&gt;Simple architecture designs&lt;/li&gt;
&lt;li&gt;Tests that cover all known use cases&lt;/li&gt;
&lt;li&gt;Reasonnable and honest estimates&lt;/li&gt;
&lt;li&gt;Calm Attitude&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quality also means dealing with our mistakes. Some mistakes can be
simple to fix, others might be impossible to re-mediate. What's most
important, is that we always ask ourselves "What can I do so that I
don't repeat the same mistake next time ? "At the end of the day, we
should be proud of our job and the work we have done, knowing that we
have accomplished the best that was possible.&lt;/p&gt;
&lt;h2&gt;QA will find nothing&lt;/h2&gt;
&lt;p&gt;Programmers are responsible for the quality of the code they develop.
Therefore, they should also be responsible for making sure that there
are no bugs in what they give to QA. Using QA as a fallback for writing
more code without checking for bugs is a bad habit to take. Small bugs
from time to time is an acceptable limit, but if QA comes back with a
list of bugs every time, then it's probably a sign that the programmer
isn't taking the quality of his code seriously. As Uncle Bob said during
the conference, "QA should find nothing. They should even ask themselves
why they exist"&lt;/p&gt;
&lt;h2&gt;We cover for each other&lt;/h2&gt;
&lt;p&gt;Teamwork isn't just about cooperation with other teammates, it's also
about sharing knowledge. When you have people in a team that specialize
in a certain domain, you risk losing all the experience that he's
acquired if ever he suddenly disappears. To make sure a team can
continue going forwards, even in unexpected situations, there should
always be more that one person who has the know how for any and every
Class or module in your code. How do you go about sharing that
experience ? One way is through pair programming, but it certainly isn't
the only way. Try finding what works best with all the members of your
team.&lt;/p&gt;
&lt;h2&gt;Honest estimates&lt;/h2&gt;
&lt;p&gt;Programmers estimate their tasks everyday, but how many of those
estimates are "honest" ? Honest estimates means giving a straight answer
instead of changing numbers to fit time constraints or a budget. It
means giving a time range (for example: 1 to 3 weeks) instead of a time
limit that will probably be busted. It also means readjusting an
estimate the moment you realize the first one won't work anymore.
Keeping estimates honest shows that you are commited to your work. It
also gives decision makers a better picture of the complexity of the
work at hand.&lt;/p&gt;
&lt;h2&gt;Automation&lt;/h2&gt;
&lt;p&gt;One of the things Uncle Bob said that really struck me was "As people
whose job is to automate things, I can't believe how much time
programmers spend repeating the same mundane tasks". I have to admit, he
has a point. The time we spend writing code compared to the time we take
to test it can boggle the mind. That time that could be well spent
working on other tasks equally as important, like improving code
structure for example. Although tests can be automated through
techniques like TDD or BDD, the principle of automation can also apply
to any recurrent task that's part of your daily development tasks.&lt;/p&gt;
&lt;p&gt;Let me give you an example from my team leader: At the beginning of
every sprint, he needs to generate a series of charts showing various
statistics about the project. Before, he would manually copy numbers in
a spreadsheet and generate the chart every week. Now that he's automated
the chart generation, he can spend more time with his team.&lt;/p&gt;
&lt;h2&gt;Continuous aggressive learning&lt;/h2&gt;
&lt;p&gt;"As programmers, we must learn to learn." Here are a few things that a
programmer needs to keep up with in order to do his job: hardware,
software, programming languages, operating systems, libraries,
frameworks. The speed at which these things can evolve is so quick that
it becomes ever more important to take the time to learn about changes
and keep up to date. Uncle Bob even suggested that the time you take to
learn these things should be separate from the time spent at work since
this represents a personal investment that enables you to stay
professional. Continuous learning is a key skill in our ever-evolving
profession. Those who fail to adapt risk falling behind.&lt;/p&gt;
&lt;h2&gt;Mentoring&lt;/h2&gt;
&lt;p&gt;Another approach to continuous learning is to teach. Mentoring is a way
of checking if you have a mastery of your knowledge since you need to be
proficient with your subject to teach successfully. It is also a way of
guiding other people on the path to professional software development.
Finally, mentoring can also be seen as a form of team work: there will
be more people who share the same knowledge (see "We cover for each
other" above)&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I really enjoyed listening to Robert C. Martin's conference. I still
consider myself as a young programmer, and this talk has convinced me of
the importance of taking some personal time to investigate what I
personally need to change in order to, one day, proudly proclaim myself
as a "professional programmer". What I also appreciated from the talk
was Uncle Bob's focus on goals instead of techniques. In other words, no
matter what methodology or technology you prefer using (TDD, BDD, Agile,
Waterfall, C++, python, .net, java, or whatever else) we should never
lose sight of what we should be doing to stay proud about the best job
out there: programming.&lt;/p&gt;
&lt;p&gt;That's it for my first blog post folks ! I hope you enjoyed it and look
forward to my next one. If you'd like to discuss more about what i've
written, you're more than welcome to leave comments.&lt;/p&gt;
&lt;/p&gt;</summary></entry><entry><title>Around XiVO - pxe and preseeding</title><link href="http://blog.xivo.io/around-xivo-pxe-and-preseeding.html" rel="alternate"></link><published>2012-05-30T19:47:00-04:00</published><author><name>atarakt</name></author><id>tag:blog.xivo.io,2012-05-30:around-xivo-pxe-and-preseeding.html</id><summary type="html">&lt;p&gt;Now that we have a functional PXE installation, we want to fully
automatise the installation process. Debian have a useful solution
called 'preseeding'. Preseeding provides a way to set answers to
questions asked during the installation process.&lt;/p&gt;
&lt;p&gt;You can find Debian documentation about preseeding on Debian wiki :
http://wiki.debian.org/DebianInstaller/Preseed&lt;/p&gt;
&lt;p&gt;We are going to be using the default Debian preseed file. We are going
to configure an HTTP server to serve this file to the Debian installer
using nginx.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apt-get install nginx

$ cat /etc/nginx/sites-enabled/myhost
    server &lt;span class="o"&gt;{&lt;/span&gt;
      listen 80&lt;span class="p"&gt;;&lt;/span&gt;
      server_tokens off&lt;span class="p"&gt;;&lt;/span&gt;
      server_name myhost.mydomain.com&lt;span class="p"&gt;;&lt;/span&gt;
      root /data&lt;span class="p"&gt;;&lt;/span&gt;

      location / &lt;span class="o"&gt;{&lt;/span&gt;
        autoindex on&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and restart the server.&lt;/p&gt;
&lt;p&gt;First, we need to create /data directory and get the preseed file from
this directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir /data &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /data
$ wget http://www.debian.org/releases/squeeze/example-preseed.txt -O preseed.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We only do some small changes in the default file to perform a fully
auto installation :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* do not create a user account

    d-i passwd/make-user boolean false

* add the root password (will be changed after the install process

    d-i passwd/root-password password r00tme
    d-i passwd/root-password-again password r00tme

* change the disk path for using in a virtual machine

    d-i partman-auto/disk string /dev/vda

* install a minimal system (without X)

    tasksel tasksel/first multiselect standard
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, we have to modify
/usr/lib/debian-installer/images/i386/text/boot-screens/menu.cfg to
specify to the installer that it must use a preseed file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;label squeeze-i386
    menu label squeeze i386
    kernel linux
    append vga=normal initrd=initrd.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;must be&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;label debian-squeeze                                                                                                                                                                           
    menu label Install Auto Debian Squeeze                                                                                                                                                     
    kernel linux                                                                                                                                                                               
    append initrd=initrd.gz rw auto=true priority=critical url=myhost.mydomain.com/./preseed.cfg locale=en_US.UTF-8 interface=auto hostname=squeeze --
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can find some explanations about the different parameters on
http://hands.com/d-i/&lt;/p&gt;
&lt;p&gt;You have to use a specific url in this case (the "/./" is very
important).&lt;/p&gt;
&lt;p&gt;Or if you want to install a XiVO system, you can use this line to use
our preseed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;label XiVO
       menu label XiVO
       kernel linux
       append initrd=initrd.gz rw auto=true priority=critical url=http://mirror.xivo.fr classes=skaro locale=en_US.UTF-8 interface=auto hostname=xivo --
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we only have an url. It's because we use a specific structure in
our /data directory (and an entry d-i in our nginx configuration) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/data
├── d-i
│   ├── lenny
│   │   ├── classes
│   │   └── lib
│   └── squeeze
│       ├── classes
│       ├── docs
│       └── lib
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can find our preseed repository on
git://git.xivo.fr/official/debian-installer.git&lt;/p&gt;
&lt;p&gt;In a next post, I will explain how we use the class to customize our
installation.&lt;/p&gt;
&lt;/p&gt;</summary><category term="PXE"></category></entry><entry><title>XiVO high availability</title><link href="http://blog.xivo.io/xivo-high-availability.html" rel="alternate"></link><published>2012-03-14T18:40:00-04:00</published><author><name>pcadotte</name></author><id>tag:blog.xivo.io,2012-03-14:xivo-high-availability.html</id><summary type="html">&lt;p&gt;High availability is available in XiVO since version 1.2.3. The current
use cases is to be able to get telephony service back in less than 5
minutes in case of a network or power failure on the master XiVO.&lt;/p&gt;
&lt;p&gt;The architecture is pretty simple at the time of this writing. The
configuration database is replicated every hours to a slave XiVO. The
slave XiVO pings the master XiVO every 30 seconds and launches asterisk
if the master is down. The slave will also stop asterisk if the master
is turned back up. The check (a ping) is pretty simple at the moment,
this means that a fail-over will not happen if asterisk or any other
service has crashed, monit should be able to restart the crashed service
in most cases anyway.&lt;/p&gt;
&lt;p&gt;To enable this feature, go to &lt;em&gt;Configuration, High availability&lt;/em&gt;. Choose
master node on the master and enter the slave's IP address in the remote
address field. On the slave, choose slave node and enter the master's IP
address in the remote address field.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ha_master.png" src="/public/.ha_master_m.jpg" title="ha_master.png, mar. 2012" /&gt;&lt;/p&gt;
&lt;p&gt;There is no way to trigger a synchronization between master and slave
from the web interface, a work around is to launch
xivo-master-slave-db-replication &amp;lt;slave-ip&amp;gt; on the master XiVO.
This might be useful if you just finished your configuration and want to
trigger a first replication or for test purposes.&lt;/p&gt;
&lt;p&gt;Some limitations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This solution uses the backup registrar from the phones, see the
    &lt;a href="http://documentation.xivo.fr" title="documentation"&gt;documentation&lt;/a&gt; for
    supported phones.&lt;/li&gt;
&lt;li&gt;Voice mail messages are not replicated between master and slave. A
    solution is to attach the message and to mail it in the notification
    and delete the message from the server when high availability
    is enabled.&lt;/li&gt;
&lt;li&gt;CEL are not replicated between master and slave. Calls on the slave
    are logged on the slave and calls on the master are logged on
    the master.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;</summary></entry><entry><title>XiVO 1.2</title><link href="http://blog.xivo.io/xivo-12.html" rel="alternate"></link><published>2012-02-14T19:35:00-05:00</published><author><name>quintana</name></author><id>tag:blog.xivo.io,2012-02-14:xivo-12.html</id><summary type="html">&lt;p&gt;As we enter 2012, we continue our development to better meet market
expectations allowing XiVO to be deployed in more companies. XiVO is a
real open and free alternative for your business phone system and it
will allow you to go even further. It is with great pleasure that I
announce the arrival of this new major release of XiVO which is also our
last considering that our development model is replaced by the agile
methodology (SCRUM).&lt;/p&gt;
&lt;p&gt;Why do we change ?&lt;/p&gt;
&lt;p&gt;Just because we want to be closer to your requests, be able to stand
out, constantly innovate and for this we need a new vision of
development. It's been several months since we changed our habits, our
ways of building software, our vision of what a software is and we will
continue in that direction. We still have a long way to go but it only
makes XiVO better for everyone.&lt;/p&gt;
&lt;p&gt;&lt;img alt="xivo-web-1-2.png" src="/public/.xivo-web-1-2_m.jpg" title="xivo-web-1-2.png, fév. 2012" /&gt;&lt;/p&gt;
&lt;p&gt;In this new release we have upgraded the operating system from Lenny to
Squeeze, updated Asterisk by installing and using the last “Long Term
Supported” 1.8 version. These major changes are not only naturally
bringing us a bunch of new native functionalities but also better
performance and stability.&lt;/p&gt;
&lt;p&gt;Regarding XiVO, we reviewed our provisioning server which was designed
at the beginning of XiVO and was not suited any more to the big
architectures we are targeting.&lt;/p&gt;
&lt;p&gt;We have refreshed the web interface in terms of functionality and
ergonomics to meet the new functionalities provided by Asterisk. We also
changed the way configuration is done by using a new server dedicated to
configuration management.&lt;/p&gt;
&lt;p&gt;The news also made us realize that we were not sure where we go with
mysql and we chose to use Postgres as a basis to save our
configurations.TDM card drivers are also updated when this new release
is installed.&lt;/p&gt;
&lt;p&gt;CTI server and XiVO client were also mainly rewritten and refactored.&lt;/p&gt;
&lt;p&gt;With this new release we also started to work on refactoring some
features which are not delivered now any more. At first, high
availability and contact center are our current priorities and will be
offered in the next coming releases.Our development method is based on
short iterations of 2 weeks, which will produce a finished and working
product. So every 2 weeks a new release is produced and you will be able
to upgrade and enjoy bug fixes and new features. Do not hesitate to
follow http://projects.xivo.fr and http://documentation.xivo.fr/ to get
a better view.&lt;/p&gt;
&lt;p&gt;We will go through our process in more details in a later post to
describe what we have set up in term of tests, documentation, bug
tracking etc ....&lt;/p&gt;
&lt;p&gt;Below what's new in this release at a glance :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Asterisk 1.8 (New options, SSL authentication, etc ...)&lt;/li&gt;
&lt;li&gt;Web interface&lt;ul&gt;
&lt;li&gt;New way of defining schedules&lt;ul&gt;
&lt;li&gt;Time zones&lt;/li&gt;
&lt;li&gt;More than one time slice per schedule&lt;/li&gt;
&lt;li&gt;More than one action when on closed&lt;/li&gt;
&lt;li&gt;Same schedule can be applied to more than one target
    (incoming calls / internal)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Call pickups groups are more flexible, can include not only
    group of users but also queues and users.&lt;/li&gt;
&lt;li&gt;SSL certificates management&lt;ul&gt;
&lt;li&gt;Can be created, updated and deleted using the interface. Can
    also be associated to different objects ( SIP accounts, CTI
    server ....)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ergonomics improvements&lt;ul&gt;
&lt;li&gt;On session expiration, last page is displayed on reconnect.&lt;/li&gt;
&lt;li&gt;Sort per columns&lt;/li&gt;
&lt;li&gt;Automatic id and password generation for user accounts&lt;/li&gt;
&lt;li&gt;Edited object reference appears on all tabs&lt;/li&gt;
&lt;li&gt;Dynamic search on all objects lists (i.e. group
    members selected)&lt;/li&gt;
&lt;li&gt;Error report on CSV import&lt;/li&gt;
&lt;li&gt;Displays free extensions (add/edit users, groups ...)&lt;/li&gt;
&lt;li&gt;Remembers last search and sort order, per object.&lt;/li&gt;
&lt;li&gt;links &lt;em&gt;create&lt;/em&gt; open in a new tab&lt;/li&gt;
&lt;li&gt;Stay on current tab on page reload&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sip Accounts (lines) are now separated from users&lt;/li&gt;
&lt;li&gt;Provisioning is completely redesigned to incorporate new server.&lt;ul&gt;
&lt;li&gt;New provisioning server integration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Queue penalty&lt;/li&gt;
&lt;li&gt;MWI remote subscribing&lt;/li&gt;
&lt;li&gt;Outbound calls redesigned&lt;/li&gt;
&lt;li&gt;Paging&lt;/li&gt;
&lt;li&gt;Queue logger daemon removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;</summary></entry><entry><title>XiVO from 2007 until now with Gource</title><link href="http://blog.xivo.io/xivo-from-2007-until-now-with-gource.html" rel="alternate"></link><published>2011-05-06T14:32:00-04:00</published><author><name>gbour</name></author><id>tag:blog.xivo.io,2011-05-06:xivo-from-2007-until-now-with-gource.html</id><summary type="html">&lt;p&gt;&lt;em&gt;5 years of development, 24 contributors, 7824 commits, 195k lines of
code.&lt;/em&gt;&lt;br /&gt;
History of Xivo in 2'30 minutes, done with Gource.&lt;/p&gt;
&lt;iframe width="425" height="349" src="http://www.youtube.com/embed/g0jI9A53BoM" frameborder="0" allowfullscreen&gt;
&lt;/iframe&gt;

&lt;/p&gt;</summary><category term="gource"></category><category term="xivo"></category></entry><entry><title>XiVO 1.2 -*- Queues Diversions -*-</title><link href="http://blog.xivo.io/xivo-12-queues-diversions-.html" rel="alternate"></link><published>2011-04-08T09:08:00-04:00</published><author><name>gbour</name></author><id>tag:blog.xivo.io,2011-04-08:xivo-12-queues-diversions-.html</id><summary type="html">&lt;p&gt;&lt;ins&gt;Asterisk queues&lt;/ins&gt; have limited possibilities of
interactions.The only way to know how a call was processed and decide
what to do next is falling back on &lt;strong&gt;\${QUEUESTATUS}&lt;/strong&gt; when the call
exits the queue.  &lt;/p&gt;
&lt;p&gt;If something goes wrong, \${QUEUESTATUS} is set to one of the following
values: &lt;em&gt;TIMEOUT&lt;/em&gt;, &lt;em&gt;FULL&lt;/em&gt;, &lt;em&gt;JOINEMPTY&lt;/em&gt;, &lt;em&gt;LEAVEEMPTY&lt;/em&gt;, &lt;em&gt;JOINUNAVAIL&lt;/em&gt; and
&lt;em&gt;LEAVEUNAVAIL&lt;/em&gt;. &lt;ins&gt;In XiVO, it fits to queues &lt;strong&gt;No answer&lt;/strong&gt; tab.&lt;/ins&gt;&lt;/p&gt;
&lt;h2&gt;Queue diversions&lt;/h2&gt;
&lt;p&gt;But in XiVO 1.2 we add a new functionality called &lt;strong&gt;diversions&lt;/strong&gt;&lt;br /&gt;
Diversions are preconditions tested &lt;em&gt;before&lt;/em&gt; a call enter into the
queue. If one precondition &lt;strong&gt;matches&lt;/strong&gt;, the incoming call is not sent
into the queue, but rerouted to the destination associated with the
condition. This allows a finer-grained control on how calls are accepted
or not into a queue  &lt;/p&gt;
&lt;p&gt;Currently, we have defined 4 preconditions. They are evaluated in order,
one after another; the first to be validated is triggering call
rerouting to the associated destination.Here they are:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;CTI status presence&lt;/em&gt;.&lt;br /&gt;
calls are diverted if some of queue agents have required statuses.I.e,
if we have more than 50 agents with *inline* status, new incoming
calls are transfered to our *indian* call center&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="/public/queue-diversions/queue-diversion-cti-presences.png" title="queue-diversion-cti-presences.png"&gt;&lt;img alt="queue-diversion-cti-presences.png" src="/public/queue-diversions/.queue-diversion-cti-presences_m.jpg" title="queue-diversion-cti-presences.png, avr. 2011" /&gt;&lt;/a&gt;&lt;br /&gt;
2. &lt;em&gt;CTI status absence&lt;/em&gt;.&lt;br /&gt;
On the contrary, we may want to divert calls when no agents have a
required status.&lt;br /&gt;
I.e, if less than 5 agents with status *ready to hold* are logged in
the queue, we considered it to be closed, and redirect calls to a
voicemail&lt;/p&gt;
&lt;p&gt;&lt;a href="/public/queue-diversions/queue-diversion-cti-nonpresences.png" title="queue-diversion-cti-nonpresences.png"&gt;&lt;img alt="queue-diversion-cti-nonpresences.png" src="/public/queue-diversions/.queue-diversion-cti-nonpresences_m.jpg" title="queue-diversion-cti-nonpresences.png, avr. 2011" /&gt;&lt;/a&gt;&lt;br /&gt;
3. &lt;em&gt;Estimated waiting time&lt;/em&gt;.&lt;br /&gt;
When the estimated wait time is exceeding a threshold value, we do not
want new calls to enter into the queue (callers do not like to wait!),
It is then possible to redirect them to another destination.&lt;br /&gt;
I.e if the wait time is higher than 5 minutes, redirect incalls to an
IVR&lt;/p&gt;
&lt;p&gt;&lt;a href="/public/queue-diversions/queue-diversion-waittime.png" title="queue-diversion-waittime.png"&gt;&lt;img alt="queue-diversion-waittime.png" src="/public/queue-diversions/.queue-diversion-waittime_m.jpg" title="queue-diversion-waittime.png, avr. 2011" /&gt;&lt;/a&gt;&lt;br /&gt;
4. &lt;em&gt;Waiting calls/Available agents&lt;/em&gt; ratio.&lt;br /&gt;
If there are more calls waiting in the queue that available agents can
handle in a relative short delay, new calls will only increase
congestion. With this diversion, you can reroute incoming calls when
this situation arises.I.e, if there is less than 1 agent for 2 waiting
calls, hangup!&lt;/p&gt;
&lt;p&gt;&lt;a href="/public/queue-diversions/queue-diversion-ratio.png" title="queue-diversion-ratio.png"&gt;&lt;img alt="queue-diversion-ratio.png" src="/public/queue-diversions/.queue-diversion-ratio_m.jpg" title="queue-diversion-ratio.png, avr. 2011" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE: the ratio is a percent&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A value of 100 means there is 1 agent for 1 call&lt;/li&gt;
&lt;li&gt;A value of 50 means a call can be handled by 2 agents&lt;/li&gt;
&lt;li&gt;A value of 200 means there is 1 agent for 2 calls&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;</summary><category term="xivo 1.2"></category><category term="web-interface"></category><category term="skaro"></category><category term="queues"></category><category term="diversion"></category></entry></feed>